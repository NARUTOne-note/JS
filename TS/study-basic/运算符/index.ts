/**
 * * 非空断言运算符 !
 * 用在变量名或者函数名之后，用来强调对应的元素是非 null|undefined 的
 * 减少冗余的代码判断，如 React 的 Ref。
 */

function onClick(callback?: () => void) {
  callback!();		// 参数是可选入参，加了这个感叹号!之后，TS编译不报错
}

/**
 * * 可选链运算符 ?.
 * 可选 ?.这个是开发者最需要的运行时(当然编译时也有效)的非空判断
 * 用来判断左侧的表达式是否是 null | undefined，如果是则会停止表达式运行，可以减少我们大量的&&运算
 * 
 * obj?.prop    obj?.[index]    func?.(args)
    写出a?.b时，编译器会自动生成如下代码
    a === null || a === void 0 ? void 0 : a.b;
    复制代码
    这里涉及到一个小知识点:undefined这个值在非严格模式下会被重新赋值，使用void 0必定返回真正的 undefined
 */


/**
 * * 空值合并运算符 ??
 * 与||的功能是相似的，区别在于 ??在左侧表达式结果为 null 或者 undefined 时，才会返回右侧表达式 
 * 书写了let b = a ?? 10，生成的代码如下：
    let b = a !== null && a !== void 0 ? a : 10;
    复制代码
    而 || 表达式，大家知道的，则对 false、''、NaN、0 等逻辑空值也会生效，不适于我们做对参数的合并
 */

// 数字分隔符_ 方便阅读
let num:number = 1_2_345.6_78_9
